已知噪聲由6種函式造成:
高斯噪聲
J = imnoise(I,"gaussian",m,var_gauss)
J = imnoise(I,"localvar",var_local)
J = imnoise(I,"localvar",intensity_map,var_local)
泊松
J = imnoise(I,"poisson")
椒鹽
J = imnoise(I,"salt & pepper",d)
斑點
J = imnoise(I,"speckle",var_speckle)
已知提示:可以考慮用直方圖分析圖片問題

可使用的解決方法:
1.image enhancement
2.image filtering

image enhancement相關函式(共有8種):
1.Histogram Equalization:result = histeq(img);
2.Negative Image:result = 255 - img;
3.Contrast Stretching Transformation:
str = stretchlim(double(img));
result = (img2 - str(1)) / (str(2) - str(1));
4.Adjust Contrast:result = uint8(min(255, max(0, im2double(img) * contrast)));
5.Binary Threshold:
 if size(img, 3) == 3
     result = rgb2gray(img) >= threshold;
else
     result = img >= threshold;
end
6.Log Transformation:result = c * log(1 + im2double(img));
7.Adjust Brightness:
for i = 1:3
      rgb_new{i} = uint8(min(255, max(0, double(img(:,:,i)) + value)));
end
result = cat(3, rgb_new{1}, rgb_new{2}, rgb_new{3});
8.Power Law Transformation:
8-1:result = c * img2 .^ gamma
8-2:
mean_intensity = mean(img2(:))
if mean_intensity < gamma_high
    result = c * img2 .^ gamma; 
elseif mean_intensity > gamma_low
   result = c* img2 .^ gamma;
 else
   result = gamma* img2 .^ 1;
end

image filtering相關函式(共有9種):
1.imnoise()
2.均值濾波(mean filter):I_blurred = conv2(A, ones(3)/(3^2),'same');
3.中值濾波(median filter):medfilt2(double(A), [3 3]);
high boost filter:
kernel = [
    -1, -1, -1;
    -1,  8, -1;
    -1, -1, -1
];
imfilter(double(A), kernel, 'replicate');
4.銳化(sharpness):conv2(A, [0,-1,0;-1,5,-1;0,-1,0],'same');
5.laplacian filter:imfilter(image,[0 1 0; 1 -4 1; 0 1 0],'replicate');
6.gauss filter:imfilter(image, fspecial('gaussian',[5 5],2), 'replicate');
7.imdilate()
8.sobel filter:
img = double(img);
sobel_x = [-1 0 1; -2 0 2; -1 0 1];
sobel_y = [-1 -2 -1; 0 0 0; 1 2 1];
gradient_x = imfilter(img, sobel_x, 'replicate'); % 水平梯度
gradient_y = imfilter(img, sobel_y, 'replicate'); % 垂直梯度
gradient_magnitude = sqrt(gradient_x.^2 + gradient_y.^2);
%normalization
gradient_magnitude = gradient_magnitude / max(gradient_magnitude(:)) * 255;
alpha = 0.3;
normalized_gradient = gradient_magnitude / max(gradient_magnitude(:));
enhanced_direct = img + alpha * img .* normalized_gradient;
enhanced_direct = max(0, min(255, enhanced_direct));
9. Canny Edge Detection:edges = edge(img, 'canny');